ubuntu 24 -> t2.xlarge , storage : 30 gb
SG -> 22, 8080, 9000, 3000

install aws cli :
sudo apt install unzip -y
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

install jenkins :
#!/bin/bash
sudo apt update -y
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | sudo tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | sudo tee /etc/apt/sources.list.d/adoptium.list
sudo apt update -y
sudo apt install temurin-17-jdk -y
/usr/bin/java --version
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y
sudo systemctl start jenkins
sudo systemctl status jenkins


Install docker :
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
sudo usermod -aG docker ubuntu
sudo chmod 777 /var/run/docker.sock
newgrp docker
sudo systemctl status docker

Install trivy :
sudo apt-get install wget apt-transport-https gnupg
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy

aws --version
docker --version
trivy --version

Install docker scout :
docker login  -u shabbirsyed103

curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin

ip :8080
configure jenkins

docker run -d --name sonar -p 9000:9000 sonarqube:lts-community
dokcer ps

ip:9000
admin , admin


manage jenkins -> plugins
Eclispe Temurin installer
Sonarqube Scanner
NodeJS
Docker, Docker commons , Docker pipeline, Docker API, Docker-build-step
OWASP Dependency-check
EMail Extension template
Blue Ocean
Pipeline: Stage View
(tick) restart jenkins


ip:9000 (Sonarqube)
admin , admin

SonarQube configuration in Jenkins :
Before configuring SonarQube in jenkins , we need to generate a SoanrQube token to establish a connection b/w jenkins and SonarQube.
Goto SonarQube console console => Administrator(top pane) -> 'Security' drop down -> users -> 3 dots -> Generate token (name : jenkins)

Configuration of SonarQube Token in Jenkins :
Manage Jenkins -> Security -> Credentials -> global =>
kind (secret text) , secret (sonarqube_token) , id (sonar-token)
kind (username and password) , username (docker_username) , password (docker_token/pass) , iD (docker)

Create webhook in SonarQube :
SonarQube Dashboard -> Administration -> Configuration -> webhooks => create
name (jenkins) , url (http:jenkins_ip:8080/sonarqube-webhook/)

Tools Configuration in Jenkins :
Manage Jenkins ->  System configuration -> tools =>
JDK => name (jdk17) , check install automatically ->Install from adoptium.net , jdk-17.0.8.1+1
SoanrQube Scanner Installation => name (sonar-scanner) , version (latest version : 6.2.0.4610)
Node JS => name (node16) , version (latest : nodeJS 16.20.0) 
Dependency check => nme (DP-check) , automatcially -> install from Github.com (select latest version : 10.0.4)
Docker => name (docker) , automatcially -> Download from docker.com , version (latest)

System Configuration in Jenkins :
Manage Jenkins -> System -> SonarQube Server =>
name (sonar-server) , url (https://sonar:9000) , server authentication token (sonar-token (from dropdown))

Gmail -> manage account -> app password (2 step authentication should be enabled for the account) =>
app name (jenkins) -> Generate password -> copy

manage jenkins -> Credentials -> System -> Global Credentials -> Username and password =>
username (@gmail.com) , password (app password), ID (mail-cred)

Manage Jenkins -> System -> Extended E-mail Notifications =>
SMTP server (smtp.gmail.com) , smtp port (465) , Advanced =>
credentials (from dropdown -> select (email-creds) , tick (use SSL, Use OAuth 2.0)

Manage Jenkins -> System -> E-mail Notifications =>
SMTP server (smtp.gmail.com) -> Advanced =>
'tick' use SMTP Authentication => username (email) , password (app_password) , tick (USE SSL) ,
SMTP port (465) ,reply-to address (email) , tick (test configuration by sending test e mail) =>
test e-amil recipient (email) -> test configuration

CTRL + F -> Default triggers -> tick (Always , Failure - Any , Success)
check email -> did u got mail or not

Jenkins -> New Item -> name (starbucks) -> pipeline -> paste the pipeline code -> build

pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage ("clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/Shabbirsyed05/starbucks.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=starbucks \
                    -Dsonar.projectKey=starbucks '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh "docker build -t starbucks ."
            }
        }
        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag starbucks shabbirsyed103/starbucks:latest "
                        sh "docker push shabbirsyed103/starbucks:latest "
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh 'docker-scout quickview shabbirsyed103/starbucks:latest'
                       sh 'docker-scout cves shabbirsyed103/starbucks:latest'
                       sh 'docker-scout recommendations shabbirsyed103/starbucks:latest'
                   }
                }
            }
        }
        stage ("Deploy to Conatiner") {
            steps {
                sh 'docker run -d --name starbucks -p 3000:3000 shabbirsyed103/starbucks:latest'
            }
        }
    }
    post {
    always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: """
                <html>
                <body>
                    <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
                        <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
                    </div>
                    <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
                        <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
                    </div>
                    <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
                        <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
                    </div>
                </body>
                </html>
            """,
            to: 'shabbirsyed0786@gmail.com',
            mimeType: 'text/html',
            attachmentsPattern: 'trivy.txt'
        }
    }
}


sonarqube -> check the vulnerabilities

ip:3000 (chrome) -> starbucks website will be opened











